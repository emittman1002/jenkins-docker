# Start a Jenkins server
# with an inbound agent
source ~/Development/docker/init
source ./start_server.config

# Set this to 1 to always start a new server
FORCE_RESTART=

# Check if the server is already running
# of if there's an existing container for it
# that we can just restart
val=`docker ps | grep $server_name`
if [ -n "$val" ]
then
	echo A container named $server_name is already running
	if [ -n $FORCE_RESTART ]
	then
		exit 0
	fi
	echo '  Stopping it...'
	docker stop $server_name
fi

val=`docker ps -a | grep $server_name`
if [ -n "$val" ]
then
	echo A container named $server_name already exists
	if [ -n $FORCE_RESTART ]
	then
		echo "  restarting it..."
		docker start $server_name
		exit 0
	fi
	echo '  Removing it...'
	docker rm $server_name
fi

# Ensure there's a network
val=`docker network ls | grep $network_name`
if [ -z "$val" ]
then
	echo ***** Creating network $network_name *****
	docker network create $network_name
fi


# Ensure there's a volume
val=`docker volume ls | grep $volume_name`
if [ -z "$val" ]
then
	echo ***** Creating volume $volume_name *****
	 docker volume create \
		--driver local \
		--label type=jenkins \
		$volume_name
fi

# Ensure there's an image
export JENKINS_URL=http://localhost:$JENKINS_PORT

val=`docker image ls | grep $image_name`
if [ -z "$val" ]
then
	echo ***** Building image $image_name for platform $BUILDPLATFORM *****
	docker build -t $image_name \
		-f server.dockerfile \
		--build-arg BASE_IMAGE_NAME=$BASE_IMAGE_NAME \
		--build-arg JENKINS_URL=$JENKINS_URL \
		--build-arg CASC_CONFIG_FILE=$CASC_CONFIG_FILE \
		--build-arg PLUGINS_FILE=$PLUGINS_FILE \
		--build-arg ADMIN_USER_ID=$ADMIN_USER_ID \
		--build-arg ADMIN_USER_PWD=$ADMIN_USER_PWD \
		--build-arg ADMIN_USER_NAME=$ADMIN_USER_NAME \
		.
fi

# Start the server
echo ***** Starting server $server_name *****

NETWORK_STUFF="--network $network_name"
MOUNT_STUFF="-v $volume_name:/home/jenkins"
PORT_STUFF="-p $JENKINS_PORT:$JENKINS_PORT -p $JENKINS_AGENT_PORT:$JENKINS_AGENT_PORT"
WORKDIR_STUFF=""
SHUTDOWN_STUFF="--restart always"
SHUTDOWN_STUFF="--rm"
SECURITY_STUFF="--env ADMIN_USER_ID=$ADMIN_USER_ID --env ADMIN_USER_NAME=$ADMIN_USER_NAME --env ADMIN_USER_PWD=$ADMIN_USER_PWD"

cmd="docker run -d $SHUTDOWN_STUFF --name $server_name $NETWORK_STUFF $PORT_STUFF $MOUNT_STUFF $SECURITY_STUFF $image_name"
container_id=`$cmd`

# Make sure the server started
last=$?
if [[ $last -ne 0 ]]
then
	exit $last
fi

echo Waiting for server container $container_id to start...
sleep 15

# Configure an agent in the running server
export agent_name=inbound-agent1

export cli_jar=jenkins-cli.jar
if [ ! -f "$cli_jar" ]
then
	# Get a copy of the CLI from the running server
	curl $JENKINS_URL/jnlpJars/$cli_jar --output $cli_jar
fi
# Create XML configuration for the agent
sed "s/#AGENT_NAME#/$agent_name/g" inbound-agent-template.xml > $agent_name.xml
java -jar ./$cli_jar -s $JENKINS_URL -auth $ADMIN_USER_ID:$ADMIN_USER_PWD create-node $agent_name < $agent_name.xml 
rm -f $agent_name.xml
rm -f $CLI_JAR

# Start the agent and connect it to the server
# echo ***** Starting agent $agent_name *****
# ./start_agent $agent_name

